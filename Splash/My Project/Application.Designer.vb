Option Strict On
Option Explicit On
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System.Threading

Namespace My

    'NOTE: This file is auto-generated; do not modify it directly.  To make changes,
    ' or if you encounter build errors in this file, go to the Project Designer
    ' (go to Project Properties or double-click the My Project node in
    ' Solution Explorer), and make changes on the Application tab.
    '
    Partial Friend Class MyApplication

        <Global.System.Diagnostics.DebuggerStepThroughAttribute()>
        Public Sub New()
            MyBase.New(Global.Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows)
            Me.IsSingleInstance = False
            Me.EnableVisualStyles = True
            Me.SaveMySettingsOnExit = True
            Me.ShutdownStyle = Global.Microsoft.VisualBasic.ApplicationServices.ShutdownMode.AfterMainFormCloses
        End Sub

        <STAThread>
        <Global.System.Diagnostics.DebuggerStepThroughAttribute()>
        Protected Overrides Sub OnCreateMainForm()
            If spControl.GetDataSetting(spControl.PilihanProfile.Aplikasi, "General", "StartUp") = "1" Then
                newMain()
            End If

            Me.MainForm = Global.Splash.rFormMain
        End Sub

        <STAThread>
        Private Shared Sub newMain()
            FormStartUp.ShowSplashScreen()
            Application.DoEvents()
            FormStartUp.SetStatus("Inisialisasi Module...")
            Thread.Sleep(500)
            FormStartUp.SetStatus("Loading Module Control")
            Thread.Sleep(300)
            FormStartUp.SetStatus("Loading Module Konektor")
            Thread.Sleep(300)
            FormStartUp.SetStatus("Loading Module Splash")
            Thread.Sleep(600)
            FormStartUp.SetStatus("Inisalisasi Assembly")
            Thread.Sleep(800)
            'FormStartUp.SetStatus("Loading module 6")
            'Thread.Sleep(50)
            'FormStartUp.SetStatus("Loading module 7")
            'Thread.Sleep(240)

            Dim ResXLibs As List(Of String) = spGlobal.EnumerateResx
            Dim Value As String

            Dim Libs As String = IO.Path.Combine(Environment.CurrentDirectory, "Libs")
            Dim Config As String = IO.Path.Combine(Environment.CurrentDirectory, "Config")
            Dim Konektor As String = IO.Path.Combine(Environment.CurrentDirectory, "Config")

            Dim list As List(Of String) = spGlobal.GetLibrariFile(Libs, spGlobal.FileReadOnlyLibrari)

            Splash.spGlobal.ListOfFileLibrari = List.Count

            Dim num1 As Integer = 0
            Dim num2 As Integer = list.Count - 1
            Dim num3 As Integer = num1

            Dim tempValue As String = (String.Format("{0} ..\\{1} {2}", "Librari ", IO.Path.GetFullPath(IO.Path.GetDirectoryName(list(num3))), ""))
            Dim BasePath As String = IO.Directory.GetParent(Environment.CurrentDirectory).FullName
            Dim StrRelative As String = spGlobal.AppsGetRelativePath(BasePath, Libs)
            Dim createLibs As String
            Do While (num3 <= num2)

                Dim Flag1 As Boolean = IO.File.Exists(list(num3))
                If Flag1 Then
                    Dim flag As Boolean = IO.File.Exists(list(num3))
                    Value = spGlobal.ParseDirektoriString("Cek Librari", StrRelative & "\" & (IO.Path.GetFileName(list(num3))), If(flag, "OK", "Not Found"))
                    FormStartUp.SetStatus(Value)

                    If Not flag Then
                        createLibs = spGlobal.ParseDirektoriString("Ekstraksi File ", StrRelative & "\" & (IO.Path.GetFileName(list(num3))), "Sukses")
                        FormStartUp.SetStatus(createLibs)
                        Thread.Sleep(500)
                    End If
                Else
                    tempValue = spGlobal.ParseDirektoriString("Ekstraksi File ", StrRelative & "\" & (IO.Path.GetFileName(list(num3))), If(Flag1, "", "Sukses"))
                    FormStartUp.SetStatus(tempValue)
                End If
                Thread.Sleep(500)
                Interlocked.Increment(num3)
            Loop
            Thread.Sleep(400)
            Dim ListKonfig As List(Of String) = spGlobal.GetLibrariFile(Config, spGlobal.FileReadOnlyKonfig)
            spGlobal.ListOfFileLibrari = ListKonfig.Count
            Dim num4 As Integer = 0
            Dim num5 As Integer = ListKonfig.Count - 1
            Dim StrKonfigRelative As String = spGlobal.AppsGetRelativePath(BasePath, Config)
            Do While (num4 <= num5)
                Dim Flag2 As Boolean = IO.File.Exists(IO.Path.Combine(Config, ListKonfig(num4)))
                If Flag2 Then
                    'tempValue = (String.Format("{0} ..\\{1} {2}", "Librari ", StrRelative & (IO.Path.GetFileName(list(num3))), If(Flag1, "OK", "")))
                    Value = spGlobal.ParseDirektoriString("Cek Librari", StrKonfigRelative & "\" & (IO.Path.GetFileName(ListKonfig(num4))), If(Flag2, "OK", ""))
                    FormStartUp.SetStatus(Value)
                Else
                    tempValue = spGlobal.ParseDirektoriString("Ekstraksi File ", StrKonfigRelative & "\" & (IO.Path.GetFileName(ListKonfig(num4))), If(Flag2, "", "Sukses"))
                    FormStartUp.SetStatus(tempValue)
                End If
                Thread.Sleep(500)
                Interlocked.Increment(num4)
            Loop

            FormStartUp.SetStatus("Inisialisasi Sukses...")
            Thread.Sleep(700)
            FormStartUp.CloseForm()
        End Sub

    End Class
End Namespace
